name: CI/CD pipeline

on:
  push:
    tags:
      - 'v*.*.*-dev'

jobs:
  extract_tag_info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      environment: ${{ steps.extract.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Tag Info
        id: extract
        run: |
          TAG=${GITHUB_REF##*/}
          VERSION=$(echo $TAG | cut -d'-' -f1)
          ENVIRONMENT=$(echo $TAG | cut -d'-' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

  check_modified_dirs:
    runs-on: ubuntu-latest
    needs: extract_tag_info
    outputs:
      modified_dirs: ${{ steps.check_modified_dirs.outputs.modified_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Modified Directory
        id: check_modified_dirs
        run: |
          MODIFIED_DIRS=$(git diff --name-only HEAD^ HEAD | grep -o '^[^/]*' | sort | uniq)
          echo "MODIFIED_DIRS=$MODIFIED_DIRS" >> $GITHUB_ENV

  setup_runtime:
    runs-on: ubuntu-latest
    needs: check_modified_dirs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Runtime Environments
        run: |
          for DIR in ${{ needs.check_modified_dirs.outputs.modified_dirs }}; do
            case $DIR in
              nodejs-app)
                echo "Installing Node.js runtime"
                sudo apt-get update
                sudo apt-get install -y nodejs npm
                ;;
              python-app)
                echo "Installing Python runtime"
                sudo apt-get update
                sudo apt-get install -y python3 python3-pip
                ;;
              java-app)
                echo "Installing Java runtime"
                sudo apt-get update
                sudo apt-get install -y openjdk-11-jdk
                ;;
              infrastructures)
                echo "Installing Terraform"
                sudo apt-get update
                sudo apt-get install terraform
                ;;
            esac
          done

  security_scan:
    runs-on: ubuntu-latest
    needs: check_modified_dirs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SonarQube Credentials from AWS Parameter Store
        id: sonar_credentials
        run: |
          export SONAR_TOKEN=$(aws ssm get-parameter --name "/path/to/SONAR_TOKEN" --with-decryption --query "Parameter.Value" --output text)
          export SONAR_HOST_URL=$(aws ssm get-parameter --name "/path/to/SONAR_HOST_URL" --query "Parameter.Value" --output text)
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "SONAR_HOST_URL=$SONAR_HOST_URL" >> $GITHUB_ENV

      - name: Install SonarQube Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2856-linux.zip
          unzip sonar-scanner-cli-4.7.0.2856-linux.zip
          sudo mv sonar-scanner-4.7.0.2856-linux /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      - name: SonarQube Scan
        run: |
          scan_passed=true
          for dir in ${{ needs.check_modified_dirs.outputs.modified_dirs }}; do
            echo "Running SonarQube scan for $dir"
            sonar_result=$(sonar-scanner \
              -Dsonar.projectBaseDir="$dir" \
              -Dsonar.projectKey=${dir//\//-} \
              -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
              -Dsonar.login=${{ env.SONAR_TOKEN }})
            if echo "$sonar_result" | grep -q "High"; then
              echo "High severity vulnerability found in $dir"
              scan_passed=false
            elif echo "$sonar_result" | grep -q "Critical"; then
              echo "Critical severity vulnerability found in $dir"
              scan_passed=false
            else
              echo "No High or Critical vulnerabilities found in $dir"
            fi
          done
          if [ "$scan_passed" = false ]; then
            echo "One or more projects have High or Critical vulnerabilities."
            exit 1
          else
            echo "All projects passed the security scan with no High or Critical vulnerabilities."
          fi

  test_project:
    runs-on: ubuntu-latest
    needs: check_modified_dirs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          for DIR in ${{ needs.check_modified_dirs.outputs.modified_dirs }}; do
            case $DIR in
              nodejs-app)
                echo "Running tests for Node.js app"
                cd app/nodejs-app
                npm install
                npm test
                ;;
              java-app)
                echo "Running tests for Java app"
                # Add Java test commands here
                ;;
              python-app)
                echo "Running tests for Python app"
                # Add Python test commands here
                ;;
            esac
            cd ../..
          done

  build_project:
    runs-on: ubuntu-latest
    needs: test_project
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Applications
        run: |
          for DIR in ${{ needs.check_modified_dirs.outputs.modified_dirs }}; do
            case $DIR in
              nodejs-app)
                echo "Building Node.js app"
                cd app/nodejs-app
                npm run build
                ;;
              java-app)
                echo "Building Java app"
                # Add Java build commands here
                ;;
              python-app)
                echo "Building Python app"
                # Add Python build commands here
                ;;
            esac
            cd ../..
          done

  build_docker_images:
    runs-on: ubuntu-latest
    needs: build_project
    outputs:
      docker_images: ${{ steps.build_images.outputs.docker_images }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Build Docker Images
        id: build_images
        run: |
          DOCKER_IMAGES=()
          for DIR in ${{ needs.check_modified_dirs.outputs.modified_dirs }}; do
            case $DIR in
              nodejs-app)
                echo "Building Docker image for Node.js app"
                docker build -t my-repo/nodejs-app:${{ needs.extract_tag_info.outputs.version }} app/nodejs-app
                DOCKER_IMAGES+=("my-repo/nodejs-app:${{ needs.extract_tag_info.outputs.version }}")
                cp app/nodejs-app/appspec.yml .
                cp app/nodejs-app/hooks/* ./hooks/
                ;;
              # Add build logic for Java and Python apps here
            esac
          done
          echo "DOCKER_IMAGES=${DOCKER_IMAGES[@]}" >> $GITHUB_ENV

  scan_docker_images:
    runs-on: ubuntu-latest
    needs: build_docker_images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Docker Container Scan
        run: |
          scan_passed=true
          for IMAGE in ${{ needs.build_docker_images.outputs.docker_images }}; do
            echo "Scanning Docker image $IMAGE"
            trivy image --exit-code 0 --severity MEDIUM,LOW $IMAGE
            trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE || scan_passed=false
          done
          if [ "$scan_passed" = false ]; then
            echo "One or more images have vulnerabilities with severity High or above."
            exit 1
          else
            echo "All images passed the security scan with no High or Critical vulnerabilities."
          fi

  docker_tag:
    runs-on: ubuntu-latest
    needs: scan_docker_images
    outputs:
      tagged_images: ${{ steps.tag_images.outputs.tagged_images }}
    steps:
      - name: Tag Docker Images
        id: tag_images
        run: |
          TAGGED_IMAGES=()
          ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          for IMAGE in ${{ needs.build_docker_images.outputs.docker_images }}; do
            IMAGE_NAME=$(echo $IMAGE | awk -F/ '{print $2}')
            TAGGED_IMAGE="${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${IMAGE_NAME}:${{ needs.extract_tag_info.outputs.version }}"
            docker tag $IMAGE $TAGGED_IMAGE
            TAGGED_IMAGES+=($TAGGED_IMAGE)
          done
          echo "TAGGED_IMAGES=${TAGGED_IMAGES[@]}" >> $GITHUB_ENV

  docker_push:
    runs-on: ubuntu-latest
    needs: docker_tag
    steps:
      - name: Push Docker Images to ECR
        run: |
          for IMAGE in ${{ needs.docker_tag.outputs.tagged_images }}; do
            echo "Logging in to ECR"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            echo "Pushing Docker image $IMAGE to ECR"
            docker push $IMAGE
          done

  trigger_codedeploy:
    runs-on: ubuntu-latest
    needs: docker_push
    outputs:
      deployment_ids: ${{ steps.deploy.outputs.deployment_ids }}
    steps:
      - name: Trigger CodeDeploy for Applications
        id: deploy
        run: |
          DEPLOYMENT_IDS=()
          for DIR in ${{ needs.check_modified_dirs.outputs.modified_dirs }}; do
            case $DIR in
              nodejs-app)
                echo "Triggering CodeDeploy for Node.js app"
                DEPLOYMENT_ID=$(aws deploy create-deployment \
                  --application-name $DIR-app \
                  --deployment-group-name $DIR-deployment-group \
                  --revision '{"revisionType": "GitHub", "gitHubLocation": {"repository": "my-repo", "commitId": "${GITHUB_SHA}"}}' \
                  --query 'deploymentId' --output text)
                DEPLOYMENT_IDS+=($DEPLOYMENT_ID)
                ;;
              # Add CodeDeploy trigger logic for Java and Python apps here
            esac
          done
          echo "DEPLOYMENT_IDS=${DEPLOYMENT_IDS[@]}" >> $GITHUB_ENV

  check_deployment_status:
    runs-on: ubuntu-latest
    needs: trigger_codedeploy
    steps:
      - name: Check Deployment Status
        run: |
          all_succeeded=true
          for DEPLOYMENT_ID in ${{ needs.trigger_codedeploy.outputs.deployment_ids }}; do
            echo "Checking status for deployment $DEPLOYMENT_ID"
            while true; do
              STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
              if [ "$STATUS" == "Succeeded" ]; then
                echo "Deployment $DEPLOYMENT_ID succeeded"
                break
              elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Stopped" ]; then
                echo "Deployment $DEPLOYMENT_ID failed with status $STATUS"
                all_succeeded=false
                break
              else
                echo "Deployment $DEPLOYMENT_ID is still in progress... checking again in 30 seconds"
                sleep 30
              fi
            done
          done
          if [ "$all_succeeded" = false ]; then
            echo "One or more deployments failed."
            exit 1
          else
            echo "All deployments succeeded."
          fi
